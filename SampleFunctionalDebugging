// 0. Documentation
//    Purpose:          Apply time delays, arrays and functional debugging. This program will allow to capture physical 
//                      proof that the system operates within specifications.
//    Author:           Ricardo Morocz
//    Date:             07/23/2017
//    Acknowledgement:  Work based on the code developed by Ramesh Yerraballi & Jon Valvano as part of the UT Austin's 
//                      Embedded Systems online course lab 9 set-up
//    Notes:            - built-in connection: PF0 connected to negative logic momentary switch, SW2
//                      - built-in connection: PF1 connected to red LED
//                      - built-in connection: PF4 connected to negative logic momentary switch, SW1

//--------------------------------------------------------------------------------------------------------------------------
// 1. Pre-Processor Directives
#include "TExaS.h"
#include "tm4c123gh6pm.h"

//--------------------------------------------------------------------------------------------------------------------------
// 2. Global Declaration

//    Global Variables
unsigned long PF4;						// Input from PF4 (switch)
unsigned long PF0;						// Input from PF0 (switch)
unsigned long Led;						// Output from PF1 (Red LED)
unsigned long PFall;			    // recording values in PortF
unsigned long PFall_old;			// recording values in PortF
unsigned long Time[50];       // first data point is wrong, the other 49 will be correct
unsigned long Data[50];       // you must leave the Data array defined exactly as it is

//    Function Prototypes
void DisableInterrupts(void); // Disable interrupts
void EnableInterrupts(void);  // Enable interrupts
void PortF_Init(void);        // Initialize Port F
void SysTick_Init(void);      // initialize SysTick, runs at 16 MHz
void Delay(void);

//--------------------------------------------------------------------------------------------------------------------------
// 3. Functions/Subroutines

int main(void){  
	unsigned long i,j,last,now;
  TExaS_Init(SW_PIN_PF40, LED_PIN_PF1);  // activate grader and set system clock to 16 MHz
  PortF_Init();   // initialize PF1 to output
  SysTick_Init(); // initialize SysTick, runs at 16 MHz
  i = 0;          // array index
	j = 0;
  last = NVIC_ST_CURRENT_R;
  EnableInterrupts();           // enable interrupts for the grader
	
  while(1){
    PF0 = GPIO_PORTF_DATA_R&0x01;
		PF4 = GPIO_PORTF_DATA_R&0x10;
		if (PF0!=0x01||PF4!=0x10){
			Led = GPIO_PORTF_DATA_R;   // read previous
			Led = Led^0x02;            // toggle red LED
			GPIO_PORTF_DATA_R = Led;   // output 
			if(i<50){
				now = NVIC_ST_CURRENT_R;
				Time[i] = (last-now)&0x00FFFFFF;  // 24-bit time difference
				last = now;
				i++;
			}
			if(j<50){
				PFall = GPIO_PORTF_DATA_R&0x13;
				if(PFall!=PFall_old){
					Data[i] = GPIO_PORTF_DATA_R&0x13; // record PF1
					j++;
				}
			}
			Delay();
		}
		PFall_old = GPIO_PORTF_DATA_R&0x13;
		
  }
}

void PortF_Init(void){ volatile unsigned long delay;
  SYSCTL_RCGC2_R |= 0x00000020;     // 1) activate clock for Port F
  delay = SYSCTL_RCGC2_R;           // allow time for clock to start
  GPIO_PORTF_LOCK_R = 0x4C4F434B;   // 2) unlock GPIO Port F
  GPIO_PORTF_CR_R = 0x1F;           // allow changes to PF4-0
  // only PF0 needs to be unlocked, other bits can't be locked
  GPIO_PORTF_AMSEL_R = 0x00;        // 3) disable analog on PF
  GPIO_PORTF_PCTL_R = 0x00000000;   // 4) PCTL GPIO on PF4-0
  GPIO_PORTF_DIR_R = 0x0E;          // 5) PF4,PF0 in, PF3-1 out
  GPIO_PORTF_AFSEL_R = 0x00;        // 6) disable alt funct on PF7-0
  GPIO_PORTF_PUR_R = 0x11;          // enable pull-up on PF0 and PF4
  GPIO_PORTF_DEN_R = 0x1F;          // 7) enable digital I/O on PF4-0
}

// Initialize SysTick with busy wait running at bus clock.
void SysTick_Init(void){
  NVIC_ST_CTRL_R = 0;                   // disable SysTick during setup
  NVIC_ST_RELOAD_R = 0x00FFFFFF;        // maximum reload value
  NVIC_ST_CURRENT_R = 0;                // any write to current clears it             
  NVIC_ST_CTRL_R = 0x00000005;          // enable SysTick with core clock
}

// Delay: Function that delays the program by 0.05 sec
// Inputs:  none
// Outputs: delay 50ms
// Notes:   none
void Delay(void){unsigned long volatile time;
  time = 80000; // approx. 0.05sec
  while(time){
   time--;
  }
}
